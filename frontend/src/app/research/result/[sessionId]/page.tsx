'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { Header } from '@/components/layout/header';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { ScrollArea } from '@/components/ui/scroll-area';
import { 
  FileText, 
  Download, 
  Share2, 
  Home, 
  RotateCcw, 
  Users, 
  MessageSquare,
  Calendar,
  Check
} from 'lucide-react';
import { useResearchStore } from '@/store/research-store';
import { ResearchResult } from '@/types';

interface ResultPageProps {
  params: Promise<{
    sessionId: string;
  }>;
}

export default function ResultPage({ params }: ResultPageProps) {
  const router = useRouter();
  const { result, resetState } = useResearchStore();
  const [copied, setCopied] = useState(false);
  const [displayResult, setDisplayResult] = useState<ResearchResult | null>(null);
  const [sessionId, setSessionId] = useState<string>('');

  useEffect(() => {
    // params를 비동기로 처리
    const resolveParams = async () => {
      try {
        const resolvedParams = await params;
        setSessionId(resolvedParams.sessionId);
      } catch (error) {
        console.error('Failed to resolve params:', error);
        router.push('/');
      }
    };
    
    resolveParams();
  }, [params, router]);

  useEffect(() => {
    if (result) {
      setDisplayResult(result);
    } else {
      // 결과가 없으면 홈으로 리다이렉트
      router.push('/');
    }
  }, [result, router]);

  const handleStartNewResearch = () => {
    resetState();
    router.push('/');
  };

  const handleGoHome = () => {
    router.push('/');
  };

  const handleDownload = () => {
    if (!displayResult) return;
    
    const content = `# ${displayResult.topic}

## 연구 개요
- 주제: ${displayResult.topic}
- 분석가 수: ${displayResult.analysts.length}명
- 인터뷰 수: ${displayResult.interview_count}회
- 완료 시간: ${new Date(displayResult.completed_at).toLocaleString('ko-KR')}

## 분석가 팀
${displayResult.analysts.map(analyst => `
### ${analyst.name}
- 역할: ${analyst.role}
- 소속: ${analyst.affiliation}
- 설명: ${analyst.description}
`).join('\n')}

## 연구 결과

${displayResult.final_report}

---
Generated by AutoGen DeepResearch
`;

    const blob = new Blob([content], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `research_${displayResult.topic.replace(/[^a-zA-Z0-9]/g, '_')}.md`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const handleCopyLink = async () => {
    try {
      await navigator.clipboard.writeText(window.location.href);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      console.error('Failed to copy: ', err);
    }
  };

  const handleShare = async () => {
    if (navigator.share) {
      try {
        await navigator.share({
          title: `연구 결과: ${displayResult?.topic}`,
          text: `AutoGen DeepResearch에서 생성된 연구 결과입니다.`,
          url: window.location.href,
        });
      } catch (err) {
        console.error('Error sharing: ', err);
      }
    } else {
      handleCopyLink();
    }
  };

  if (!displayResult) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-background via-background to-background/95">
        <Header />
        <div className="container mx-auto px-4 py-8">
          <div className="flex items-center justify-center min-h-[60vh]">
            <Card className="max-w-md">
              <CardHeader>
                <CardTitle className="text-center">결과를 찾을 수 없습니다</CardTitle>
              </CardHeader>
              <CardContent className="text-center space-y-4">
                <p className="text-muted-foreground">
                  연구 결과가 없습니다. 새로운 연구를 시작해주세요.
                </p>
                <Button onClick={handleGoHome} className="w-full">
                  <Home className="mr-2 h-4 w-4" />
                  홈으로 돌아가기
                </Button>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-background via-background to-background/95">
      <Header />
      
      <main className="container mx-auto px-4 py-8">
        <div className="max-w-4xl mx-auto space-y-6">
          {/* 헤더 */}
          <div className="text-center space-y-4">
            <div className="text-6xl mb-4">🎉</div>
            <h1 className="text-3xl font-bold">연구 완료!</h1>
            <p className="text-lg text-muted-foreground max-w-2xl mx-auto">
              AI 전문가들이 협력하여 작성한 연구 결과입니다
            </p>
            <Badge variant="outline" className="text-xs">
              세션 ID: {sessionId}
            </Badge>
          </div>

          {/* 연구 정보 */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <FileText className="h-5 w-5" />
                연구 정보
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <h3 className="font-semibold text-lg">{displayResult.topic}</h3>
                  <div className="flex items-center gap-2 text-sm text-muted-foreground">
                    <Calendar className="h-4 w-4" />
                    {new Date(displayResult.completed_at).toLocaleString('ko-KR')}
                  </div>
                </div>
                <div className="space-y-2">
                  <div className="flex items-center gap-2 text-sm">
                    <Users className="h-4 w-4" />
                    <span>{displayResult.analysts.length}명의 분석가</span>
                  </div>
                  <div className="flex items-center gap-2 text-sm">
                    <MessageSquare className="h-4 w-4" />
                    <span>{displayResult.interview_count}회 인터뷰</span>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* 분석가 팀 */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Users className="h-5 w-5" />
                분석가 팀
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {displayResult.analysts.map((analyst, index) => (
                  <div key={index} className="p-4 border rounded-lg space-y-2">
                    <div className="flex items-center gap-2">
                      <div className="w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center">
                        <span className="text-sm font-semibold text-primary">
                          {analyst.name.charAt(0)}
                        </span>
                      </div>
                      <div>
                        <h4 className="font-semibold">{analyst.name}</h4>
                        <p className="text-sm text-muted-foreground">{analyst.role}</p>
                      </div>
                    </div>
                    <p className="text-sm text-muted-foreground">{analyst.affiliation}</p>
                    <p className="text-sm">{analyst.description}</p>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>

          {/* 연구 결과 */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <FileText className="h-5 w-5" />
                연구 결과
              </CardTitle>
            </CardHeader>
            <CardContent>
              <ScrollArea className="h-[60vh] w-full">
                <div className="prose prose-sm max-w-none">
                  <div className="whitespace-pre-wrap text-sm leading-relaxed">
                    {displayResult.final_report}
                  </div>
                </div>
              </ScrollArea>
            </CardContent>
          </Card>

          {/* 액션 버튼들 */}
          <div className="flex flex-wrap gap-4 justify-center">
            <Button onClick={handleDownload} variant="outline" className="flex-1 max-w-xs">
              <Download className="mr-2 h-4 w-4" />
              다운로드
            </Button>
            
            <Button onClick={handleShare} variant="outline" className="flex-1 max-w-xs">
              {copied ? (
                <>
                  <Check className="mr-2 h-4 w-4" />
                  복사됨
                </>
              ) : (
                <>
                  <Share2 className="mr-2 h-4 w-4" />
                  공유
                </>
              )}
            </Button>
            
            <Button onClick={handleStartNewResearch} className="flex-1 max-w-xs">
              <RotateCcw className="mr-2 h-4 w-4" />
              새 연구 시작
            </Button>
          </div>

          {/* 추가 정보 */}
          <Card className="bg-muted/50">
            <CardContent className="pt-6">
              <div className="text-center space-y-2">
                <p className="text-sm text-muted-foreground">
                  이 연구 결과는 AI 전문가들의 협력으로 생성되었습니다.
                </p>
                <p className="text-xs text-muted-foreground">
                  AutoGen DeepResearch v1.0.0 | 
                  Powered by Azure OpenAI
                </p>
              </div>
            </CardContent>
          </Card>
        </div>
      </main>
    </div>
  );
}