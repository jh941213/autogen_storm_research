'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { Header } from '@/components/layout/header';
import { AuroraText } from '@/components/ui/aurora-text';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { 
  History, 
  Search, 
  FileText, 
  Calendar, 
  Users, 
  MessageSquare,
  Eye,
  Download,
  Trash2,
  RefreshCw
} from 'lucide-react';
import { apiClient } from '@/lib/api';

interface HistoryItem {
  id: string;
  topic: string;
  status: 'completed' | 'failed' | 'running';
  analysts: number;
  interviews: number;
  createdAt: string;
  completedAt?: string;
}

export default function HistoryPage() {
  const router = useRouter();
  const [searchTerm, setSearchTerm] = useState('');
  const [historyItems, setHistoryItems] = useState<HistoryItem[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    loadHistory();
  }, []);

  const loadHistory = async () => {
    try {
      setLoading(true);
      setError(null);
      
      // API에서 연구 목록 가져오기
      const response = await apiClient.listResearchTasks();
      
      // 목록을 기반으로 각 연구의 상세 정보 가져오기
      const historyData: HistoryItem[] = [];
      
      for (const taskId of response.tasks) {
        try {
          const status = await apiClient.getResearchStatus(taskId);
          const item: HistoryItem = {
            id: taskId,
            topic: status.result?.topic || '알 수 없음',
            status: status.status as 'completed' | 'failed' | 'running',
            analysts: status.result?.analysts?.length || 0,
            interviews: status.result?.interview_count || 0,
            createdAt: taskId.includes('_') ? 
              new Date(taskId.split('_')[1].replace(/(\d{4})(\d{2})(\d{2})/, '$1-$2-$3')).toISOString() : 
              new Date().toISOString(),
            completedAt: status.result?.completed_at
          };
          historyData.push(item);
        } catch (err) {
          console.error(`Error loading status for ${taskId}:`, err);
        }
      }
      
      // 최신 순으로 정렬
      historyData.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());
      setHistoryItems(historyData);
      
    } catch (err) {
      console.error('Error loading history:', err);
      setError('히스토리를 불러오는 중 오류가 발생했습니다.');
      
      // 데모 데이터 표시
      setHistoryItems([
        {
          id: 'demo_1',
          topic: 'AI의 미래와 윤리적 도전',
          status: 'completed',
          analysts: 5,
          interviews: 12,
          createdAt: new Date(Date.now() - 1000 * 60 * 60 * 2).toISOString(),
          completedAt: new Date(Date.now() - 1000 * 60 * 60 * 1).toISOString()
        },
        {
          id: 'demo_2',
          topic: '기후 변화와 재생에너지 정책',
          status: 'completed',
          analysts: 3,
          interviews: 8,
          createdAt: new Date(Date.now() - 1000 * 60 * 60 * 24).toISOString(),
          completedAt: new Date(Date.now() - 1000 * 60 * 60 * 23).toISOString()
        }
      ]);
    } finally {
      setLoading(false);
    }
  };

  const filteredItems = historyItems.filter(item =>
    item.topic.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const handleViewResult = (item: HistoryItem) => {
    if (item.status === 'completed') {
      router.push(`/research/result/${item.id}`);
    }
  };

  const handleDownload = async (item: HistoryItem) => {
    try {
      const result = await apiClient.getResearchResult(item.id);
      const content = `# ${result.topic}

## 연구 개요
- 주제: ${result.topic}
- 분석가 수: ${result.analysts.length}명
- 인터뷰 수: ${result.interview_count}회
- 완료 시간: ${new Date(result.completed_at).toLocaleString('ko-KR')}

## 분석가 팀
${result.analysts.map(analyst => `
### ${analyst.name}
- 역할: ${analyst.role}
- 소속: ${analyst.affiliation}
- 설명: ${analyst.description}
`).join('\n')}

## 연구 결과

${result.final_report}

---
Generated by AutoGen DeepResearch
`;

      const blob = new Blob([content], { type: 'text/markdown' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `research_${result.topic.replace(/[^a-zA-Z0-9]/g, '_')}.md`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    } catch (err) {
      console.error('Error downloading result:', err);
    }
  };

  const handleDelete = async (item: HistoryItem) => {
    if (confirm(`"${item.topic}" 연구를 삭제하시겠습니까?`)) {
      try {
        await apiClient.cancelResearch(item.id);
        setHistoryItems(prev => prev.filter(h => h.id !== item.id));
      } catch (err) {
        console.error('Error deleting research:', err);
      }
    }
  };

  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'completed':
        return <Badge className="bg-green-100 text-green-800">완료</Badge>;
      case 'failed':
        return <Badge className="bg-red-100 text-red-800">실패</Badge>;
      case 'running':
        return <Badge className="bg-blue-100 text-blue-800">진행 중</Badge>;
      default:
        return <Badge variant="outline">{status}</Badge>;
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-background via-background to-background/95">
      <Header />
      
      <main className="container mx-auto px-4 py-8">
        <div className="max-w-4xl mx-auto space-y-6">
          {/* 헤더 */}
          <div className="text-center space-y-4">
            <h1 className="text-3xl font-bold flex items-center justify-center gap-2">
              <History className="h-8 w-8" />
              <AuroraText 
                text="연구 히스토리"
                speed={80}
                showCursor={false}
              />
            </h1>
            <p className="text-lg text-muted-foreground">
              과거 연구 결과를 확인하고 관리하세요
            </p>
          </div>

          {/* 검색 및 필터 */}
          <Card>
            <CardContent className="pt-6">
              <div className="flex gap-4 items-center">
                <div className="relative flex-1">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                  <Input
                    placeholder="연구 주제 검색..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="pl-10"
                  />
                </div>
                <Button onClick={loadHistory} variant="outline">
                  <RefreshCw className="h-4 w-4 mr-2" />
                  새로고침
                </Button>
              </div>
            </CardContent>
          </Card>

          {/* 에러 상태 */}
          {error && (
            <Card className="border-yellow-200 bg-yellow-50">
              <CardContent className="pt-6">
                <p className="text-yellow-800">{error}</p>
                <p className="text-sm text-yellow-600 mt-2">
                  데모 데이터를 표시합니다.
                </p>
              </CardContent>
            </Card>
          )}

          {/* 로딩 상태 */}
          {loading && (
            <Card>
              <CardContent className="pt-6">
                <div className="text-center space-y-4">
                  <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto"></div>
                  <p className="text-muted-foreground">히스토리를 불러오는 중...</p>
                </div>
              </CardContent>
            </Card>
          )}

          {/* 히스토리 목록 */}
          {!loading && (
            <div className="space-y-4">
              {filteredItems.length === 0 ? (
                <Card>
                  <CardContent className="pt-6">
                    <div className="text-center space-y-4">
                      <FileText className="h-12 w-12 text-muted-foreground mx-auto" />
                      <div>
                        <h3 className="font-semibold">연구 히스토리가 없습니다</h3>
                        <p className="text-sm text-muted-foreground">
                          {searchTerm ? '검색 결과가 없습니다' : '첫 번째 연구를 시작해보세요'}
                        </p>
                      </div>
                      <Button onClick={() => router.push('/')}>
                        새 연구 시작하기
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              ) : (
                filteredItems.map((item) => (
                  <Card key={item.id} className="hover:shadow-md transition-shadow">
                    <CardContent className="pt-6">
                      <div className="flex items-start justify-between">
                        <div className="flex-1 space-y-2">
                          <div className="flex items-center gap-3">
                            <h3 className="font-semibold text-lg">{item.topic}</h3>
                            {getStatusBadge(item.status)}
                          </div>
                          
                          <div className="flex items-center gap-4 text-sm text-muted-foreground">
                            <div className="flex items-center gap-1">
                              <Calendar className="h-4 w-4" />
                              {new Date(item.createdAt).toLocaleDateString('ko-KR')}
                            </div>
                            {item.completedAt && (
                              <div className="flex items-center gap-1">
                                <Calendar className="h-4 w-4" />
                                완료: {new Date(item.completedAt).toLocaleDateString('ko-KR')}
                              </div>
                            )}
                          </div>
                          
                          <div className="flex items-center gap-4 text-sm">
                            <div className="flex items-center gap-1">
                              <Users className="h-4 w-4" />
                              {item.analysts}명 분석가
                            </div>
                            <div className="flex items-center gap-1">
                              <MessageSquare className="h-4 w-4" />
                              {item.interviews}회 인터뷰
                            </div>
                          </div>
                        </div>
                        
                        <div className="flex gap-2">
                          {item.status === 'completed' && (
                            <>
                              <Button
                                size="sm"
                                variant="outline"
                                onClick={() => handleViewResult(item)}
                              >
                                <Eye className="h-4 w-4 mr-1" />
                                보기
                              </Button>
                              <Button
                                size="sm"
                                variant="outline"
                                onClick={() => handleDownload(item)}
                              >
                                <Download className="h-4 w-4 mr-1" />
                                다운로드
                              </Button>
                            </>
                          )}
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => handleDelete(item)}
                            className="text-red-600 hover:text-red-700"
                          >
                            <Trash2 className="h-4 w-4" />
                          </Button>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                ))
              )}
            </div>
          )}
        </div>
      </main>
    </div>
  );
}